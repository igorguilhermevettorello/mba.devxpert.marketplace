@page
@model RegisterModel
@{
    ViewBag.Title = "Registro";
    Layout = null; // Não usa layout para simplificar
}

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="utf-8" />
    <title>Registro - Marketplace</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 1rem;
        }

        .register-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 1.5rem;
            box-shadow: 0 1rem 3rem rgba(0, 0, 0, 0.2);
            overflow: hidden;
            max-width: 500px;
            width: 100%;
        }

        .register-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem 1.5rem;
            text-align: center;
        }

        .register-header i {
            font-size: 3rem;
            margin-bottom: 0.5rem;
            display: block;
        }

        .register-header h4 {
            margin: 0;
            font-weight: 300;
            font-size: 1.25rem;
        }

        .register-body {
            padding: 2rem 1.5rem;
        }

        .form-floating {
            margin-bottom: 1rem;
        }

        .form-floating .form-control {
            border-radius: 0.75rem;
            border: 2px solid #e9ecef;
            transition: all 0.3s ease;
        }

        .form-floating .form-control:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            border-radius: 0.75rem;
            padding: 0.75rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 0.5rem 1rem rgba(102, 126, 234, 0.4);
        }

        .links-section {
            border-top: 1px solid #e9ecef;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
        }

        .link-item {
            display: flex;
            align-items: center;
            padding: 0.5rem 0;
            text-decoration: none;
            color: #6c757d;
            transition: all 0.3s ease;
            border-radius: 0.5rem;
        }

        .link-item:hover {
            color: #667eea;
            background-color: rgba(102, 126, 234, 0.1);
            text-decoration: none;
        }

        .link-item i {
            margin-right: 0.5rem;
            font-size: 0.875rem;
        }

        .validation-summary-errors {
            background-color: #f8d7da;
            color: #721c24;
            padding: 0.75rem;
            border-radius: 0.75rem;
            margin-bottom: 1rem;
        }

        .text-danger {
            color: #dc3545 !important;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        .external-login-section {
            background: #f8f9fa;
            border-radius: 0.75rem;
            padding: 1.5rem;
            margin-top: 1.5rem;
        }

        .external-login-section h5 {
            color: #6c757d;
            font-size: 1rem;
            margin-bottom: 1rem;
        }

        .btn-external {
            background: #fff;
            border: 2px solid #e9ecef;
            color: #6c757d;
            border-radius: 0.75rem;
            padding: 0.5rem 1rem;
            margin: 0.25rem;
            transition: all 0.3s ease;
        }

        .btn-external:hover {
            border-color: #667eea;
            color: #667eea;
            transform: translateY(-1px);
        }

        .password-requirements {
            background: #e3f2fd;
            border: 1px solid #bbdefb;
            border-radius: 0.75rem;
            padding: 1rem;
            margin-bottom: 1rem;
            font-size: 0.875rem;
            color: #1976d2;
        }

        .password-requirements h6 {
            margin-bottom: 0.5rem;
            font-weight: 600;
        }

        .password-requirements ul {
            margin-bottom: 0;
            padding-left: 1.25rem;
        }
        
        /* Estilos para transições suaves ao limpar erros */
        .form-floating .form-control {
            transition: all 0.3s ease;
        }
        
        .form-floating .form-control.input-validation-error {
            border-color: #dc3545;
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
        }
        
        .text-danger {
            transition: opacity 0.3s ease;
        }
        
        .text-danger.hidden {
            opacity: 0;
            height: 0;
            overflow: hidden;
        }
    </style>
</head>
<body>
    <div class="register-container">
        <div class="register-header">
            <i class="bi bi-person-plus"></i>
            <h4>Criar Conta</h4>
        </div>
        
        <div class="register-body">
            <form id="registerForm" asp-route-returnUrl="@Model.ReturnUrl" method="post">
                <div asp-validation-summary="ModelOnly" class="validation-summary-errors" role="alert"></div>
                
                <div class="form-floating">
                    <input asp-for="Input.Nome" class="form-control" autocomplete="name" aria-required="true" placeholder="Seu nome completo" />
                    <label asp-for="Input.Nome">Nome</label>
                    <span asp-validation-for="Input.Nome" class="text-danger"></span>
                </div>
                
                <div class="form-floating">
                    <input asp-for="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label asp-for="Input.Email">Email</label>
                    <span asp-validation-for="Input.Email" class="text-danger"></span>
                </div>
                
                <div class="form-floating">
                    <input asp-for="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label asp-for="Input.Password">Senha</label>
                    <span asp-validation-for="Input.Password" class="text-danger"></span>
                </div>
                
                <div class="password-requirements">
                    <h6><i class="bi bi-shield-check me-2"></i>Requisitos da senha:</h6>
                    <ul>
                        <li>Mínimo de 6 caracteres</li>
                        <li>Pelo menos uma letra maiúscula</li>
                        <li>Pelo menos uma letra minúscula</li>
                        <li>Pelo menos um número</li>
                        <li>Pelo menos um caractere especial</li>
                    </ul>
                </div>
                
                <div class="form-floating">
                    <input asp-for="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label asp-for="Input.ConfirmPassword">Confirmar Senha</label>
                    <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
                </div>
                
                <div class="d-grid mb-3">
                    <button id="registerSubmit" type="submit" class="btn btn-primary">
                        <i class="bi bi-person-plus me-2"></i>Criar Conta
                    </button>
                </div>
            </form>

            <div class="links-section">
                <a asp-page="./Login" asp-route-returnUrl="@Model.ReturnUrl" class="link-item">
                    <i class="bi bi-person-circle"></i>
                    <span>Já tem uma conta? Faça login</span>
                </a>
                
                <a asp-page="./ResendEmailConfirmation" class="link-item">
                    <i class="bi bi-envelope"></i>
                    <span>Reenviar confirmação de email</span>
                </a>
                
                <a asp-page="./ForgotPassword" class="link-item">
                    <i class="bi bi-question-circle"></i>
                    <span>Esqueceu a senha?</span>
                </a>
            </div>

            @if ((Model.ExternalLogins?.Count ?? 0) > 0)
            {
                <div class="external-login-section">
                    <h5><i class="bi bi-shield-check me-2"></i>Registro com serviços externos</h5>
                    <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post">
                        <div class="d-flex flex-wrap justify-content-center">
                            @foreach (var provider in Model.ExternalLogins!)
                            {
                                <button type="submit" class="btn btn-external" name="provider" value="@provider.Name" title="Registrar usando sua conta @provider.DisplayName">
                                    <i class="bi bi-@(provider.DisplayName.ToLower().Contains("google") ? "google" : "box-arrow-in-right") me-2"></i>
                                    @provider.DisplayName
                                </button>
                            }
                        </div>
                    </form>
                </div>
            }
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <partial name="_ValidationScriptsPartial" />
    
    <script>
        // Função para limpar erros quando o usuário focar no campo
        function clearErrorsOnFocus() {
            // Seleciona todos os inputs do formulário
            const inputs = document.querySelectorAll('#registerForm input');
            
            inputs.forEach(input => {
                input.addEventListener('focus', function() {
                    // Remove a classe de erro do input
                    this.classList.remove('input-validation-error');
                    
                    // Encontra o span de erro correspondente e o esconde com transição suave
                    const fieldName = this.name;
                    const errorSpan = document.querySelector(`span[data-valmsg-for="${fieldName}"]`);
                    if (errorSpan && errorSpan.textContent.trim() !== '') {
                        // Adiciona classe para transição suave
                        errorSpan.classList.add('hidden');
                        
                        // Remove o conteúdo após a transição
                        setTimeout(() => {
                            errorSpan.textContent = '';
                            errorSpan.classList.remove('hidden');
                        }, 300);
                    }
                    
                    // Remove a classe de erro do container do input
                    const formFloating = this.closest('.form-floating');
                    if (formFloating) {
                        formFloating.classList.remove('has-error');
                    }
                });
                
                // Também limpa erros quando o usuário começa a digitar
                input.addEventListener('input', function() {
                    if (this.classList.contains('input-validation-error')) {
                        this.classList.remove('input-validation-error');
                        
                        const fieldName = this.name;
                        const errorSpan = document.querySelector(`span[data-valmsg-for="${fieldName}"]`);
                        if (errorSpan && errorSpan.textContent.trim() !== '') {
                            errorSpan.classList.add('hidden');
                            setTimeout(() => {
                                errorSpan.textContent = '';
                                errorSpan.classList.remove('hidden');
                            }, 300);
                        }
                    }
                });
            });
        }
        
        // Executa quando o DOM estiver carregado
        document.addEventListener('DOMContentLoaded', function() {
            clearErrorsOnFocus();
        });
    </script>
</body>
</html>
